{"version":3,"sources":["component/PageModal.js","component/Body.js","App.js","serviceWorker.js","index.js"],"names":["ModalPage","props","Modal","show","modalShow","onHide","setModalShow","size","centered","Header","Title","Body","Form","Control","value","dataTable","inputNama","onChange","e","handleInput","type","placeholder","inputJabatan","style","marginTop","marginBottom","inputJk","as","defaultValue","inputTl","Footer","Button","variant","onClick","closeModal","simpanData","state","inputId","panggilSemua","bind","hapusData","clearInput","panggilById","id","fetch","then","response","json","hasil","setState","nama_karyawan","jabatan","jenis_kelamin","tanggal_lahir","this","alert","method","body","JSON","stringify","headers","result","target","Row","Col","align","Alert","sm","Container","Table","striped","bordered","hover","responsive","textAlign","reverse","map","index","key","Component","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5778139a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\n\r\nfunction ModalPage(props){\r\n\r\n\treturn(\r\n\t\t<Modal show={props.modalShow} onHide={()=>props.setModalShow(true)} size=\"lg\" centered>\r\n\t\t\t<Modal.Header>\r\n\t\t\t\t<Modal.Title>Data Karyawan</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<Form.Control value={props.dataTable.inputNama}  onChange={(e)=> props.handleInput('inputNama', e)}  type=\"text\" placeholder=\"Masukkan Nama\" />\r\n\t\t\t\t<Form.Control value={props.dataTable.inputJabatan} onChange={(e)=> props.handleInput('inputJabatan', e)} style={{marginTop: '10px', marginBottom: '10px'}} type=\"text\" placeholder=\"Masukkan Jabatan\" />\r\n\t\t\t\t<Form.Control value={props.dataTable.inputJk}  onChange={(e)=> props.handleInput('inputJk', e)} as=\"select\" defaultValue=\"Pilih...\">\r\n\t\t\t\t\t<option value= \"\">Pilih Jenis Kelamin</option>\r\n\t\t\t\t\t<option value= \"Laki-Laki\">Laki-Laki</option>\r\n        \t\t\t<option value= \"Perempuan\">Perempuan</option>\r\n\t\t\t\t </Form.Control>\r\n\t\t\t\t<Form.Control value={props.dataTable.inputTl}  onChange={(e)=> props.handleInput('inputTl', e)} style={{marginTop: '10px'}} type=\"date\" />\r\n\t\t\t</Modal.Body>\r\n\t\t\t<Modal.Footer>\r\n\t\t\t\t<Button variant=\"secondary\" onClick={()=>props.closeModal()} >Close</Button>\r\n\t\t\t\t<Button variant=\"success\" onClick={()=>props.simpanData()} >Simpan</Button>\r\n\t\t\t</Modal.Footer>\r\n\t\t</Modal>\r\n\r\n\t)\r\n}\r\n\r\nexport default ModalPage;","import React, {Component} from 'react';\r\nimport { Container, Row, Col, Alert, Table, Button } from 'react-bootstrap';\r\nimport ModalPage from './PageModal';\r\n\r\nclass Body extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tdataTable: [],\r\n\t\t\tinputNama: '',\r\n\t\t\tinputJabatan: '',\r\n\t\t\tinputJk: '',\r\n\t\t\tinputTl: '',\r\n\t\t\tinputId: ''\r\n\t\t}\r\n\r\n\t\tthis.panggilSemua=this.panggilSemua.bind(this);\r\n\t\tthis.hapusData=this.hapusData.bind(this);\r\n\t\tthis.closeModal=this.closeModal.bind(this);\r\n\t\tthis.handleInput=this.handleInput.bind(this);\r\n\t\tthis.clearInput=this.clearInput.bind(this);\r\n\t\tthis.simpanData=this.simpanData.bind(this);\r\n\t\tthis.panggilById=this.panggilById.bind(this);\r\n\t}\r\n\r\n\tpanggilById(id){\r\n\t\tfetch(`http://localhost:3000/data-karyawan/${id}`)\r\n  \t\t\t.then((response) => response.json())\r\n  \t\t\t.then((hasil => {\r\n\t  \t\t\t\tthis.props.setModalShow(true)\r\n\t  \t\t\t\tthis.setState(\r\n\t\t  \t\t\t\t{\r\n\t\t  \t\t\t\t\tinputNama: hasil.nama_karyawan,\r\n\t\t\t\t\t\t\tinputJabatan: hasil.jabatan,\r\n\t\t\t\t\t\t\tinputJk: hasil.jenis_kelamin,\r\n\t\t\t\t\t\t\tinputTl: hasil.tanggal_lahir,\r\n\t\t\t\t\t\t\tinputId: hasil.id\r\n\t\t  \t\t\t\t}\r\n\t\t  \t\t\t)\r\n\t  \t\t\t}\r\n  \t\t\t))\r\n\t}\r\n\r\n\tsimpanData(){\r\n\t\tif(this.state.inputNama === \"\" || this.state.inputJabatan === \"\" || this.state.inputJk === \"\" || this.state.inputTl === \"\"){\r\n\t\t\talert(\"Silahkan isi data terlebih dahulu\")\r\n\t\t} else if(this.state.inputId === \"\"){\r\n\t\t\tfetch('http://localhost:3000/data-karyawan',{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\tnama_karyawan: this.state.inputNama,\r\n\t\t\t\t\tjabatan: this.state.inputJabatan,\r\n\t\t\t\t\tjenis_kelamin: this.state.inputJk,\r\n\t\t\t\t\ttanggal_lahir: this.state.inputTl\r\n\t\t\t\t}),\r\n\t\t\t\theaders:{\r\n\t\t\t\t\t'Content-type': 'application/json; charset=UTF-8',\r\n\t\t\t\t},\r\n\t\t\t}).then((response) =>response.json())\r\n\t\t\t  .then((result =>{\r\n\t\t\t\talert(\"Data Karyawan Telah Disimpan\")\r\n\t\t\t\tthis.closeModal()\r\n\t\t\t\tthis.panggilSemua()\r\n\t\t\t}))\r\n\t\t}else{\r\n\t\t\t\tfetch(`http://localhost:3000/data-karyawan/${this.state.inputId}`,{\r\n\t\t\t\t\tmethod: 'PUT',\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tnama_karyawan: this.state.inputNama,\r\n\t\t\t\t\t\tjabatan: this.state.inputJabatan,\r\n\t\t\t\t\t\tjenis_kelamin: this.state.inputJk,\r\n\t\t\t\t\t\ttanggal_lahir: this.state.inputTl\r\n\t\t\t\t\t}),\r\n\t\t\t\t\theaders:{\r\n\t\t\t\t\t\t'Content-type': 'application/json; charset=UTF-8',\r\n\t\t\t\t\t},\r\n\t\t\t\t}).then((response) =>response.json())\r\n\t\t\t  \t\t.then((result =>{\r\n\t\t\t  \t\talert(\"Data Karyawan Telah Diperbaharui\")\r\n\t\t\t\t\tthis.panggilSemua()\r\n\t\t\t\t\tthis.closeModal()\t\t\t\t\t\r\n\t\t\t}))\r\n\t\t}\r\n\t}\r\n\r\n\thandleInput(value, e){\r\n\t\tthis.setState({[value]: e.target.value})\r\n\t}\r\n\r\n\r\n\tcloseModal(){\r\n\t\tthis.props.setModalShow(false)\r\n\t\tthis.clearInput()\r\n\t}\r\n\r\n\tclearInput(){\r\n\t\tthis.setState({\r\n\t\t\tinputNama: '',\r\n\t\t\tinputJabatan: '',\r\n\t\t\tinputJk: '',\r\n\t\t\tinputTl: '',\r\n\t\t\tinputId: ''\r\n\t\t})\r\n\t}\r\n\r\n\thapusData(id){\r\n\t\tfetch(`http://localhost:3000/data-karyawan/${id}`, {\r\n\t\t\tmethod: 'DELETE'\r\n\t\t}).then((response => {\r\n\t\t\talert('Data Karyawan Sudah Terhapus')\r\n\t\t\tthis.panggilSemua()\r\n\t\t}))\r\n\t}\r\n\r\n\tpanggilSemua(){\r\n\t\tfetch('http://localhost:3000/data-karyawan')\r\n\t\t.then((response)=> response.json())\r\n\t\t.then((hasil)=> this.setState({dataTable: hasil}))\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.panggilSemua()\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col align=\"center\"><Alert variant= \"success\">DATA KARYAWAN</Alert></Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col sm={9}></Col>\r\n\t\t\t\t\t<Col align=\"center\" sm={3}><Button onClick={()=> this.props.setModalShow(true)} variant=\"primary\" size=\"sm\">Tambah</Button></Col>\r\n\t\t\t\t</Row><br />\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<ModalPage \r\n\t\t\t\t\tmodalShow={this.props.modalShow}\r\n\t\t\t\t\tsetModalShow={this.props.setModalShow} \r\n\t\t\t\t\tcloseModal={this.closeModal}\r\n\t\t\t\t\thandleInput={this.handleInput}\r\n\t\t\t\t\tdataTable={this.state}\r\n\t\t\t\t\tsimpanData={this.simpanData}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<Table striped bordered hover responsive style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t\t\t\t  <thead>\r\n\t\t\t\t\t\t\t\t\t    <tr>\r\n\t\t\t\t\t\t\t\t\t      <th>Id</th>\r\n\t\t\t\t\t\t\t\t\t      <th>Nama Karyawan</th>\r\n\t\t\t\t\t\t\t\t\t      <th>Jabatan</th>\r\n\t\t\t\t\t\t\t\t\t      <th>Jenis Kelamin</th>\r\n\t\t\t\t\t\t\t\t\t      <th>Tanggal Lahir</th>\r\n\t\t\t\t\t\t\t\t\t      <th>Aksi</th>\r\n\t\t\t\t\t\t\t\t\t    </tr>\r\n\t\t\t\t\t\t\t\t\t  </thead>\r\n\t\t\t\t\t\t\t\t\t  <tbody>\r\n\t\t\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\t\t  \tthis.state.dataTable.reverse().map((value, index)=>{\r\n\t\t\t\t\t\t\t\t\t  \t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t\t    <tr key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>{value.id}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>{value.nama_karyawan}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>{value.jabatan}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>{value.jenis_kelamin}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>{value.tanggal_lahir}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t      <td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  <Button onClick={()=> this.panggilById(value.id)} variant=\"success\" size=\"sm\">Edit</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  <Button onClick={()=> this.hapusData(value.id)} variant=\"danger\" size=\"sm\">Hapus</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t      </td>\r\n\t\t\t\t\t\t\t\t\t\t\t    </tr>\r\n\t\t\t\t\t\t\t\t\t\t\t)    \r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t  </tbody>\r\n\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t    </Row>\r\n\t\t\t    </Container>\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Body;","import React from 'react';\nimport './css/bootstrap.min.css';\nimport Body from './component/Body';\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false)\n\n  return (\n    <div>\n        <Body modalShow={modalShow} setModalShow={setModalShow} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}